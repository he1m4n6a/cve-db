package commonerr

import (
	"errors"
	"fmt"
	"strings"
)

var (
	// ErrFilesystem occurs when a filesystem interaction fails.
	ErrFilesystem = errors.New("something went wrong when interacting with the fs")

	// ErrCouldNotDownload occurs when a download fails.
	ErrCouldNotDownload = errors.New("could not download requested resource")

	// ErrNotFound occurs when a resource could not be found.
	ErrNotFound = errors.New("the resource cannot be found")

	// ErrCouldNotParse is returned when a fetcher fails to parse the update data.
	ErrCouldNotParse = errors.New("could not parse")
)

// ErrBadRequest occurs when a method has been passed an inappropriate argument.
type ErrBadRequest struct {
	s string
}

// NewBadRequestError instantiates a ErrBadRequest with the specified message.
func NewBadRequestError(message string) error {
	return &ErrBadRequest{s: message}
}

func (e *ErrBadRequest) Error() string {
	return e.s
}

// CombineErrors merges a slice of errors into one separated by ";". If all
// errors are nil, return nil.
func CombineErrors(errs ...error) error {
	errStr := []string{}
	for i, err := range errs {
		if err != nil {
			errStr = append(errStr, fmt.Sprintf("[%d] %s", i, err.Error()))
		}
	}

	if len(errStr) != 0 {
		return errors.New(strings.Join(errStr, ";"))
	}
	return nil
}

